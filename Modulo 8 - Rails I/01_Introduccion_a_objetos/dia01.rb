# Programaci√≥n Orientada a Objetos

#* Clase
class Persona
end

class Llamada
end

class Prestamo
end

class Boleta
  def pagar
    #
  end
end

#* instancia/objeto
persona             = Persona.new #* Instanciar

puts persona.class


# Abstracci√≥n
# Es el no aber c√≥mo est√°n 
# desarrolladas las cosas por dentro



# Encapsulaci√≥n
# Atributos y M√©todos para agregar 
class Persona

  def saludar(nombre) # m√©todo de instancia
    
    print "Hola #{nombre}!"

  end

end

ignacio = Persona.new
ignacio.saludar
ignacio.saludar








# Atributos | Estados | Caracter√≠sticas
class Persona

  # El m√©todo constructor o initialize en ruby
  def initialize # esto se ejecuta cuando usamos .new
    @estado = :vivo   # Variable de Instancia
    puts "Estoy vivo üßü‚Äç‚ôÇÔ∏è"
  end

  def saludar(nombre) # m√©todo de instancia
    print "Hola #{nombre}!, estoy #{@estado}"
  end

end

# variables de instancia
class Vehiculo
  def encender()
    # texto = "cambiando de estado" # Variables locales, su alcance es solo del m√©todo
    # puts texto
    @encendido = :on   # Variable de instancia comienza con @. Est√°n disponibles para toda la clase
  end
  def apagar()
    # puts texto
    @encendido = :off
  end
  def estado()
    @encendido
  end
end

v1 = Vehiculo.new
v1.encender
v1.estado

v2 = Vechiculo.new
v2.apagar
v2.estado

# El m√©todo constructor o initialize en ruby
class Persona
  def initialize(nuevo_nombre, nuevo_telefono)
    @nombre = nuevo_nombre
    @telefono = nuevo_telefono
  end

  def obtener_nombre
    @nombre
  end

  def asignar_nombre=(nombre)
    @nombre = nombre
  end

  def obtener_telefono
    @telefono
  end
  def asignar_telefono(telefono)
    @telefono = telefono
  end

  def saludar(nombre) # m√©todo de instancia
    "Hola soy #{@nombre}, c√≥mo estas #{nombre}?"
  end

end

m1 = Mascota.new("Shadow")
m1.nombre
# Accesores resumidos

class Persona

  attr_accessor :nombre, :telefono, :direccion

  def initialize(nuevo_nombre, nuevo_telefono)
    @nombre = nuevo_nombre
    @telefono = nuevo_telefono
  end

  def saludar(nombre) # m√©todo de instancia
    "Hola soy #{@nombre}, c√≥mo estas #{nombre}?"
  end

end

class Mascota
  attr_accessor :nombre   # Crear la variable @nombre y define los m√©todos de obtener y asignar
  attr_reader :raza       # Crea la variable @raza y define el m√©todo obtene_raza
  attr_writer :ultima_consulta # Crea la variable @ultima_consulta y define el m√©todo asignar_ultima_consulta
end


class Persona
  
  attr_accessor :nombre

  def initialize(nombre = "an√≥nimo")
    @nombre = nombre
    @edad = 0
  end

  def saludar
    puts "hola #{@nombre}, tengo #{@edad}"
  end

end

p1 = Persona.new("Trinidad")


# require_relative

# cardinalidades
# 0..1
# 1
# 1..n
# 0..n

##* Ejercicio: Pedidos desde el mar
# El restaurante El Sabor del Mar, decide que es momento de automatizar sus pedidos para cu√°l necesita tener pre cargado en un sistema
# sus 5 platos: Ceviche 2000CLP, Sopa de cangrejo 1000CLP, Salm√≥n ahumado 3000CLP, Calamar frito 3000CLP y Arroz mixto 5000CLP
# Cuando se realiza un pedido primero se debe registrar al cliente con su nombre, direcci√≥n y tel√©fono, despu√©s de tener estos datos
# es necesario crear el pedido y comenzar a agregar los platos que desee al mismo.
# Los pedidos cuentan con solamente 3 estados: preparando, en_camino y entregado, as√≠ que el software deber√≠a ser capaz de mostrar esto,
# adem√°s de poder calcular el total del pedido y ver el detalle del mismo

##* Ejercicio: Tamagotchi
# Dise√±ar una mascota virtual que cuente con una vida, la capacidad de "vestir" accesorios como: gorras, lentes o collares, comer y ejercitarse. 
# Para lograr dise√±ar el juego hay que recordar que la comida afecta directamente a la vida de la mascota, la fruta suma vida y el chocolate le resta, 
# los valores de cada uno deben ser definidos al azar.
# Los juguetes que puede cargar deber√°n tener un nombre y una descripci√≥n antes de asociarlo a una mascota
# La funci√≥n de ejercitarse que es propia de la mascota, deber√≠a sumarle a la vida +5 cada vez que sea llamada.

##* Ejercicios: Chateando
# Para evaluar la funcionaliadad de chat en una aplicaci√≥n de administraci√≥n en condominios residenciales, es necesario hacer un prototipo
# donde cada residente que quiera probarlo va a tener que dar su nombre y n√∫mero de tel√©fono. Al momento de hacerlo ser√° capaz de enviar
# mensajes a otros residentes. 
# Utilizando clases y objetos, dise√±ar e implementar dos clases que permitan instanciar residentes, que hablen entre s√≠ y asignarlos a 
# sus casas que se encuentran definidas por letra y n√∫mero entre la A-C y del 1-5, por ejemplo la cada B4 existe y la casa Z8 no.

##* Ejercicio: Adopci√≥n de Mascotas
# Una fundaci√≥n de animales se encuentra en su edici√≥n XIX de adopci√≥n y se han dado cuenta que seguir haci√©ndola de forma manual
# es un proceso muy desgastante. En este proceso se debe conocer a las mascotas que est√°n adoptadas o no junto con sus datos b√°sicos
# como: nombre, raza, numero de vacunas y una observaci√≥n opcional
# Por el lado de las personas, antes de poder adoptar es necesario registrarlas con un nombre, identificaci√≥n y tel√©fono, despu√©s de eso
# recien podr√≠amos realizar la acci√≥n de adoptar a la mascota. En la aplicaci√≥n debe quedar relacionado la persona con la mascota
# y una persona puede adoptar muchas mascotas, as√≠ que ser√≠a bueno que se pudiera imprimir todas las mascotas que la persona ha adoptado 
# tanto en consola como en un archivo .csv

